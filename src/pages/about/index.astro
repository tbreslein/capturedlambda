---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { Code } from 'astro/components';
---

<!--
  @astropage
  The about page, giving a small blurp about myself.
-->

<BaseLayout title="About">
  <h1>About</h1>
  <h3>What is this website about?</h3>
  <p>Hey, I'm Tommy, and this is my personal little website.</p>
  <p>
    This site serves as both my portfolio as well as blog. Initially, it
    was just a blog, but when I started to prepare myself to apply for
    software development jobs, I figured I could hijack it to also host my
    portfolio, so here we are!
  </p>
  <h3>Who am I?</h3>
  <p>
    I'm a physicist turned IT-admin, about to turn software dev. Turns out,
    if you want to get into numerical physics, you need to do programming,
    but depending on your school you may have not been taught a sufficient
    amount of it during your undergrad. That was the situation I was in,
    and during my time as a doctoral candidate working on simulation
    software projects, all of this 'clicked' somehow.
  </p>
  <p>
    I didn't just limit myself to learning the bare minimum though, so I
    dove into how to do proper software development. I taught myself the
    dreaded topic of 'algorithms and data structures', good patterns and
    structure for programs, properly taught myself the toolchains I worked
    with beyond what I needed to just keep things going in the projects I
    was working in.
  </p>
  <p>
    My journey was a bit weird, and eventually I had to realise that
    academia isn't something I want to work for till I retire. I took an IT
    job as an 'easy' job I could still do at my institute, keep working on
    my thesis, and then transition into software development next. I want
    to turn this into my job, because this has become a major passsion of
    mine.
  </p>
  <h3>What I learned along the way</h3>
  <p>
    The path I took to end up where I am now might have been strange, but I
    learned a TON of things along the way. In the beginning of this
    journey, I needed to learn how to learn programming languages pretty
    quickly, because the astrophysics department I ended up working at used
    many different languages side-to-side. Most importantly, I needed to
    learn at least some basic python, and I needed to become proficient in
    C and Fortran quickly.
  </p>
  <p>
    Aside from that, I needed to be at least have a passive understanding of
    Bash, and a bunch of tools/tooling: Makefiles, git, Linux (from a user's
    perspective at that point); to name the most important ones. My
    supervisor also, at one point, told me about the Julia language, back
    when it was still at version <tt>0.3</tt>. I'm still using that one
    occassionally, but I have to be honest: Setting up the LSP for Julia
    for vim/neovim (yes, I use vim, btw) is an aweful process and I cannot
    be asked to do it...
  </p>
  <p>
    Anyways, eventually I figured I wanted to not just be "good enough" at
    programming, I wanted to actually "git gud". I started learning C++,
    because the library landscape for numerical applications in C was
    slowly dying, whereas for C++ it was striving. I was about to start a
    new project for my doctoral thesis, so using C++ quickly seemed like
    the obvious choice. This was also where I started to slowly learn how
    to improve my code quality, I embraced using modern tools like
    language servers, doxygen, how to write good tests, etc.
  </p>
  <p>
    Shortly after, right when its 2018 edition released, I learned about
    Rust. I was a bit strange, and some things seemed unnecessarily
    complicated at the time, but after diving into functional languages
    like Haskell in 2020 just for fun, Rust also kind of clicked for me,
    and now its probably my favourite language to use.
  </p>
  <p>
    2020 in general was the year where I started to invest a LOT of my
    free time into leveling up; branching out to Haskell was just one
    part of it. I've already played around with the idea to make proper
    software development my job and career, but 2020 was when I decided
    to actually do it for real, so I started preparing myself. I dipped
    into more languages, design patterns, algorithms and data structures,
    tooling, etc.
  </p>
  <h3>My time as a system admin</h3>
  <p>
    As I've said in the beginning, I'm currently working as a system admin.
    I've always had a knack for tinkering with PCs; I always joke that
    I've started learning about the insides of computers before I was able
    to read properly.
  </p>
  <p>
    People at work knew that, and during my work as a doctoral candidate
    / researcher I also started learning more and more about Linux, having
    been Windows-only kinda guy up to that point. So one day, my current
    contract was already scheduled to run out half a year from then, my
    supervisor asked me to fill the admin position at the department that
    had been vacant for three quarters of a year (turns out, nobody wants
    to do this job for the little pay you get working for a public
    university).
  </p>
  <p>
    I accepted, because just a couple months earlier I decided to leave
    academia anyways to pursue a software development career, so this job
    presented itself as my first step towards that; away from research, but
    still working with the people I knew in the hopes of maybe finishing my
    thesis on the side.
  </p>
  <p>
    This was another immense learning experience. I already knew a lot
    about toolchains, compilers, and the like, but there was a whole other
    world out there that I only ever heared of but never actually
    interacted with. I learned a lot about dev-ops related topics, like
    automation via ansible, Docker, GitLab CI, and slurm. This job might
    have not been the thing I wanted to do till I retire, but it was
    certainly a good learning experience.
  </p>
  <p>
    Apart from the things I already mentioned, I also learned how to deal
    with having a lot of responsibility. I was more or less my own boss,
    and I had no one working beside me. My bosses were physics professors,
    and they gave me a LOT of freedom when it came how to do my job.
  </p>
  <h3>About this website</h3>
  <p>
    Enough about me, let's talk a bit about this website.
  </p>
  <p>
    So, I used AstroJS, SolidJS, and Tailwind/DaisyUI for this blog, and
    hosting it on Netlify. Before landing on AstroJS, I played around with
    NextJS as the metaframework, but it did WAY too much for what I wanted
    this site to be. I discovered AstroJS just a month or two before they
    released 1.0, and I fell in love because of its flexibility, as well as
    making it incredibly easy to just throw markdown at it for content.
    Obviously, this is incredible for blogs, where you can easily draft
    them in markdown, throw that into AstroJS, and it just works.
  </p>
  <p>
    Since AstroJS also gives you the ability to write components in a bunch
    of different frameworks. Observing and playing around in the javascript
    frontend frameworks, I got really interested in SolidJS, because it has
    the - for me at least - fairly intuitive React-like syntax that I was
    already used to, but with a couple of really sick niceties like
    build-in state management, and utility components like
    <tt>&lt;For&gt;</tt>. Obviously, since this is rendered without any
    reactivity, performance is not a concern of mine here, but it is pretty
    cool to use nonetheless.
  </p>
</BaseLayout>
